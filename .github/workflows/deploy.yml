name: Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  test-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Test container startup
      run: |
        docker run --rm -d --name test-bot \
          -e BOT_TOKEN=test_token \
          -e ADMIN_MAIN_GUILD_ID=123456789 \
          -e ADMIN_DEV_GUILD_ID=987654321 \
          ${{ needs.build.outputs.image-tag }} \
          python -c "print('Container test successful')"
        
        sleep 5
        docker logs test-bot
        docker stop test-bot

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, test-image]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment"
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        # Add actual deployment commands here
        # Example: kubectl, docker-compose, or cloud provider CLI

    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests on staging"
        # Add smoke test commands here
        sleep 10
        echo "‚úÖ Smoke tests passed"

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: "Staging deployment ${{ job.status }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, test-image, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Create deployment
      uses: actions/github-script@v6
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            description: 'Production deployment',
            auto_merge: false
          });
          
          console.log('Deployment created:', deployment.data.id);

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment"
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        # Add actual production deployment commands here

    - name: Update deployment status
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const deployments = await github.rest.repos.listDeployments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            environment: 'production',
            per_page: 1
          });
          
          if (deployments.data.length > 0) {
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployments.data[0].id,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              description: 'Production deployment ${{ job.status }}'
            });
          }

    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: "üéâ Production deployment ${{ job.status }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    environment: production
    
    steps:
    - name: Rollback deployment
      run: |
        echo "üîÑ Rolling back production deployment"
        # Add rollback commands here
        
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        text: "‚ö†Ô∏è Production rollback initiated"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
