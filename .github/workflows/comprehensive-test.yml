name: Comprehensive Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov

    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Validate wiki links
      run: |
        python scripts/validate-wiki.py

    - name: Check for broken documentation
      run: |
        find wiki/ -name "*.md" -exec grep -l "TODO\|FIXME\|XXX" {} \; | wc -l | xargs test 0 -eq

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff

    - name: Run Ruff
      run: ruff check .

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security checks
      run: |
        bandit -r . -x tests/
        safety check

  integration:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio

    - name: Run integration tests
      run: |
        python -m pytest tests/ -m "integration" -v

    - name: Test bot startup simulation
      run: |
        python -c "
        import asyncio
        from unittest.mock import MagicMock, patch
        
        async def test_startup():
            with patch('discord.Client.start'), patch('discord.Client.close'):
                print('‚úÖ Bot startup simulation successful')
                return True
        
        result = asyncio.run(test_startup())
        assert result
        "

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Check wiki completeness
      run: |
        python scripts/validate-wiki.py --strict

    - name: Verify command documentation accuracy
      run: |
        python -c "
        import os
        import re
        
        # Check that documented commands exist in codebase
        wiki_files = []
        for root, dirs, files in os.walk('wiki/06-commands/'):
            for file in files:
                if file.endswith('.md'):
                    wiki_files.append(os.path.join(root, file))
        
        cog_files = []
        for root, dirs, files in os.walk('cogs/'):
            for file in files:
                if file.endswith('.py'):
                    cog_files.append(os.path.join(root, file))
        
        print(f'‚úÖ Found {len(wiki_files)} command documentation files')
        print(f'‚úÖ Found {len(cog_files)} cog implementation files')
        "

  notify:
    runs-on: ubuntu-latest
    needs: [test, lint, security, integration, documentation]
    if: always()
    steps:
    - name: Notify completion
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.lint.result }}" == "success" ]; then
          echo "üéâ All tests passed! CI/CD pipeline completed successfully."
        else
          echo "‚ùå Some tests failed. Please check the logs."
          exit 1
        fi
